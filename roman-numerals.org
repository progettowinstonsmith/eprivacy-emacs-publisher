* roman-numerals.el --- Roman numeral conversion library -*- lexical-binding: t; -*-

#+TITLE: roman-numerals.el — Roman numeral conversion for Emacs
#+AUTHOR: Emmanuele Somma
#+LANGUAGE: en

* Commentary
This package provides two core functionalities:

1. Conversion of Arabic numerals (integers) to Roman numerals.
2. Parsing Roman numeral strings back to integers.

It includes options for case (uppercase/lowercase), suffix styles (e.g. IIIº, IIª), and test coverage with `ert`.

* Requirements
None — this package is standalone and works with any modern Emacs (25+).

* Code
** Configuration and Data Table
We define a constant association list for converting Arabic to Roman numerals.

#+begin_src emacs-lisp :tangle roman-numerals.el
  ;; -*- lexical-binding: t; -*-
  
  (defconst roman-numerals--table
    '((1000 . "M") (900 . "CM") (500 . "D") (400 . "CD")
      (100 . "C") (90 . "XC") (50 . "L") (40 . "XL")
      (10 . "X") (9 . "IX") (5 . "V") (4 . "IV") (1 . "I"))
    "Alist of decimal values mapped to Roman numeral symbols.")
#+end_src

** roman-numeral
This function converts a positive integer into its Roman numeral representation. It accepts keyword arguments:

- `:case` (either `'upper` or `'lower`, defaults to `'upper`)
- `:suffix` (can be `'none`, `'masculine` or `'feminine`) — appends º or ª respectively

#+begin_src emacs-lisp :tangle roman-numerals.el
(defun roman-numeral (n &rest options)
  "Convert integer N to a Roman numeral string.

Optional keyword OPTIONS:
 - :case (upper|lower)
 - :suffix (none|masculine|feminine)"
  (unless (and (integerp n) (> n 0) (<= n 3999))
    (error "N must be an integer between 1 and 3999"))
  (let ((table roman-numerals--table)
        (roman "")
        (case-option (plist-get options :case))
        (suffix (plist-get options :suffix)))
    (dolist (pair table)
      (let ((value (car pair))
            (symbol (cdr pair)))
        (while (>= n value)
          (setq roman (concat roman symbol))
          (setq n (- n value)))))
    (when (eq case-option 'lower)
      (setq roman (downcase roman)))
    (cond
     ((eq suffix 'masculine) (setq roman (concat roman "º"))) ;; º
     ((eq suffix 'feminine)  (setq roman (concat roman "ª")))) ;; ª
    roman))
#+end_src

** roman-numeral-parse
This function parses a Roman numeral string (in upper or lower case) and returns the corresponding integer.

#+begin_src emacs-lisp :tangle roman-numerals.el
(defun roman-numeral-parse (s)
  "Parse a Roman numeral string S and return its integer value.
Ignores case and trailing suffixes (º, ª)."
  (let ((input (upcase (replace-regexp-in-string "[ªº]" "" s)))
        (table roman-numerals--table)
        (result 0))
    (while (> (length input) 0)
      (let ((matched nil))
        (dolist (pair table)
          (let ((value (car pair))
                (symbol (cdr pair)))
            (when (string-prefix-p symbol input)
              (setq result (+ result value))
              (setq input (substring input (length symbol)))
              (setq matched t))))
      (unless matched
        (error "Invalid Roman numeral sequence: %s" s))))
    result))
#+end_src

* Tests
We define ERT tests to ensure correctness of the core functionality.

#+begin_src emacs-lisp :tangle test-roman-numerals.el
  ;; -*- lexical-binding: t; -*-
  
  (require 'ert)
  (require 'roman-numerals)

  (ert-deftest roman-numeral-basic ()
    (should (equal (roman-numeral 1) "I"))
    (should (equal (roman-numeral 4) "IV"))
    (should (equal (roman-numeral 36) "XXXVI"))
    (should (equal (roman-numeral 2025) "MMXXV")))

  (ert-deftest roman-numeral-options ()
    (should (equal (roman-numeral 3 :case 'lower) "iii"))
    (should (equal (roman-numeral 2 :suffix 'masculine) "IIº"))
    (should (equal (roman-numeral 2 :suffix 'feminine :case 'lower) "iiª")))

  (ert-deftest roman-numeral-parse-basic ()
    (should (= (roman-numeral-parse "X") 10))
    (should (= (roman-numeral-parse "xxxvi") 36))
    (should (= (roman-numeral-parse "MMXXV") 2025))
    (should (= (roman-numeral-parse "iiiº") 3)))
#+end_src

* Manual
This package exports two primary functions:

- ~(roman-numeral N &rest options)~
  Converts an integer to a Roman numeral string.

- ~(roman-numeral-parse STRING)~
  Converts a Roman numeral string back into an integer.

* Provide feature
#+begin_src emacs-lisp :tangle roman-numerals.el
(provide 'roman-numerals)
;;; roman-numerals.el ends here
#+end_src
